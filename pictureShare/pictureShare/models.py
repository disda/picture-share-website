# -*- coding:utf-8 -*-from pictureShare import db, login_managerimport randomfrom datetime import datetime# 目前是制动添加100用户(用户图像100张)，每个用户有3张图片共300张，每张图片有3条评论共900条评论class Comment (db.Model):    id = db.Column (db.Integer, primary_key=True, autoincrement=True)  # 这是评论的序号    content = db.Column (db.String (1024))  # 这是评论的内容    user_id = db.Column (db.Integer, db.ForeignKey ('user.id'))  # 这是评论用户的id    image_id = db.Column (db.Integer, db.ForeignKey ('image.id'))  # 这是被评论图片的id    status = db.Column (db.Boolean, default=0)  # 0正常，1删除默认是正常状态    users = db.relationship ('User')  # 与用户的对应关系，评论用户的数据库地址    # users指向users类，并加载多个地址    def __init__(self, content, user_id, image_id):        self.user_id = user_id        self.content = content        self.image_id = image_id    def __repr__(self):        return "<Comment: %d %s>" % (self.id, self.comment)  # 表示就是id加评论内容class Image (db.Model):  # 图片数据库对象    id = db.Column (db.Integer, primary_key=True, autoincrement=True)  # 图片id，自动添加    url = db.Column (db.String (256))  # 图片的资源url    user_id = db.Column (db.Integer, db.ForeignKey ('user.id'))  # 图片所属用户id    create_date = db.Column (db.DateTime)  # 这是这张图片的创建时间    comments = db.relationship ('Comment')  # 这是只想评论类，获取图片的评论    def __init__(self, url, user_id):        self.url = url        self.user_id = user_id        self.create_date = datetime.now ()    def __repr__(self):        return "<Image %s %d>" % (self.url, self.id)  # 表示对象：url及图片idclass User (db.Model):    id = db.Column (db.Integer, primary_key=True, autoincrement=True)  # 用户id    username = db.Column (db.String (80), unique=True)  # 用户名称    password = db.Column (db.String (256))  # 用户密码    head_url = db.Column (db.String (256))  # 用户头像    salt = db.Column (db.String (32))    images = db.relationship ('Image', backref='user', lazy='dynamic')  # 指向图片类的地址，image类加载一个新的方法user    # 通过my_imge 使用user类对象数据    def __init__(self, username, password, salt=""):        self.username = username        self.password = password        self.salt = salt        self.head_url = "http://images.nowcoder.com/head/" + str (random.randint (0, 1000)) + 'm.png'    def __repr__(self):        return "<User %s %d>" % (self.username, self.id)    @property    def is_authenticated(self):   # 这些字段是全局可用的，current_user        return True    @property    def is_alive(self):        return True    @property    def is_active(self):        return True    @property    def is_anonymous(self):        return False;    def get_id(self):        return self.id@login_manager.user_loaderdef loader_user(user_id):    return User.query.get (user_id)